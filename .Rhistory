if (!require("tidyverse")) install.packages("tidyverse")
# packages
library(tidyverse)
library(RColorBrewer)
library(ncdf4)
library(dplyr)
library(tidyr)
library(lubridate)
library(sf)
library(rnaturalearth)
library(ggplot2)
folder_path <- "C:\Users\jeann\Downloads\data"
# Get a list of all .nc files in the folder data
folder_path <- "C:\Users\jeann\Downloads\data"
folder_path <- setwd("C:\Users\jeann\Downloads\data")
folder_path <- "C:/Users/jeann/Downloads/data"
nc_files <- list.files(path = folder_path, pattern = "\\.nc$", full.names = TRUE)
nc_files <- list.files(path = folder_path, pattern = "\\.nc$", full.names = TRUE)
# Loop through each file
for (nc_file in nc_files) {
# Open the NetCDF file
#nc<-nc_open("data/era5test_2m_temperature_1975_monthly_6W-10E_41N-52N.nc")
nc <- nc_open(nc_file)
print(nc)
# Read dimensions
time_raw <- ncvar_get(nc, "valid_time")
lon <- ncvar_get(nc, "longitude")
lat <- ncvar_get(nc, "latitude")
# Convert time to POSIXct
time <- as.POSIXct(time_raw, origin = "1970-01-01", tz = "UTC")
# Read weather variables
t2m <- ncvar_get(nc, "t2m")
# Close nc file
nc_close(nc)
# Turn weather variable from 3D to 1D object:
# Prepare a grid for all combinations of dimensions
n_time <- length(time)
n_lat <- length(lat)
n_lon <- length(lon)
grid <- expand.grid(
time = time,
lat = lat,
lon = lon
)
# Flatten each 3D variable to 1D vector
flatten_cube <- function(x) {
aperm(x, c(3, 2, 1)) %>% as.vector()
}
grid$t2m <- flatten_cube(t2m)
print(head(t2m))
# Reorder columns, check data frame and clean
weather_df <- grid %>%
rename(
time = time,
latitude = lat,
longitude = lon
) %>%
select(time, latitude, longitude,  t2m)
#Check the data frame ===
print(head(weather_df))
str(weather_df)
# Transform time variable
weather_df<- weather_df  %>%
mutate(year=lubridate ::year(time))
weather_df<- weather_df  %>%
mutate(month=lubridate ::month(time))
# turn weather variable into right format
weather_df<- weather_df  %>%
mutate( t2m= as.numeric(t2m), temp=t2m-273.15)
# Extract year and month from the dataframe
# (assuming they are constants in the dataframe)
year_val <- unique(weather_df$year)
# remove useless var
weather_df<-weather_df %>%
select(-(time),-(t2m))
# Construct the filename
save_name <- paste0("weather_", year_val, ".rds")
# Save the dataframe
saveRDS(weather_df, file = file.path("clean/", save_name))
}
View(weather_df)
View(weather_df)
data_folder <- "clean"
year_min <- 1975
year_max <- 2024
# List all RDS files in the folder
rds_files <- list.files(path = data_folder, pattern = "^weather_\\d{4}\\.rds$", full.names = TRUE)
# Read and combine RDS files within the year range
weather_data <- lapply(rds_files, function(file) {
data <- readRDS(file)
if ("year" %in% names(data) && any(data$year >= year_min & data$year <= year_max)) {
return(data)
} else {
return(NULL)
}
}) %>%
bind_rows()
# crop to france extent
# Download France's admin boundaries
france <- ne_countries(scale = "medium", country = "France", returnclass = "sf")
data_folder <- "C:/Users/jeann/Downloads/clean"
year_min <- 1975
year_max <- 2024
rds_files <- list.files(path = data_folder, pattern = "^weather_\\d{4}\\.rds$", full.names = TRUE)
# Read and combine RDS files within the year range
weather_data <- lapply(rds_files, function(file) {
data <- readRDS(file)
if ("year" %in% names(data) && any(data$year >= year_min & data$year <= year_max)) {
return(data)
} else {
return(NULL)
}
}) %>%
bind_rows()
weather_sf <- st_as_sf(weather_data, coords = c("longitude", "latitude"), crs = 4326)
avg_temp_by_year <- weather_data %>%
group_by(year) %>%
summarise(avg_temperature = mean(temp, na.rm = TRUE)) %>%
arrange(year)
View(weather_data)
avg_temp_by_year <- weather_df %>%
group_by(year) %>%
summarise(avg_temperature = mean(temp, na.rm = TRUE)) %>%
arrange(year)
View(avg_temp_by_year)
View(avg_temp_by_year)
avg_temp_by_year <- mutate(avg_temp_by_year, date = make_date(year))
theme_strip <- function(){
theme_minimal() %+replace%
theme(
axis.text.y = element_blank(),
axis.line.y = element_blank(),
axis.title = element_blank(),
panel.grid.major = element_blank(),
legend.title = element_blank(),
axis.text.x = element_text(vjust = 3),
panel.grid.minor = element_blank(),
plot.title = element_text(size = 14, face = "bold"),
legend.key.width = unit(.5, "lines")
)
}
col_strip <- brewer.pal(11, "RdBu")
# all
brewer.pal.info
# For the final graphic we use the geometry geom_tile( ).
#Since the data does not have a specific value for the Y axis, we need a dummy value, here I used 1. Also, I adjust the width of the color bar in the legend.
maxmin <- range(avg_temp_by_year$avg_temperature, na.rm = T)
md <- mean(avg_temp_by_year$avg_temperature, na.rm = T)
graph <- ggplot(
avg_temp_by_year,
aes(date, y = 1, fill = avg_temperature)
) +
geom_tile() +
scale_x_date(
date_breaks = "5 years",
date_labels = "%Y",
expand = c(0, 0)
) +
scale_fill_gradientn(colors = rev(col_strip), values = scales::rescale(c(maxmin[1], md, maxmin[2])),
na.value = "gray80") +
labs(
title = "Annual temperature in France vs 1975-2024 average",
caption = "Data: ERA5"
) +
coord_cartesian(expand = FALSE) +
theme_strip()
ggsave("C:/Users/jeann/Downloads/clean/climate_stripes_France_19752024.png", plot = graph, device = "png", width = 10, height = 2, dpi = 300)
# style of graphs
theme_strip <- function(){
theme_minimal() %+replace%
theme(
axis.text.y = element_blank(),
axis.line.y = element_blank(),
axis.title = element_blank(),
panel.grid.major = element_blank(),
legend.title = element_blank(),
axis.text.x = element_text(vjust = 3),
panel.grid.minor = element_blank(),
plot.title = element_text(size = 14, face = "bold"),
legend.key.width = unit(.5, "lines")
)
}
col_strip <- brewer.pal(11, "RdBu")
# all
brewer.pal.info
# For the final graphic we use the geometry geom_tile( ).
#Since the data does not have a specific value for the Y axis, we need a dummy value, here I used 1. Also, I adjust the width of the color bar in the legend.
maxmin <- range(avg_temp_by_year$avg_temperature, na.rm = T)
md <- mean(avg_temp_by_year$avg_temperature, na.rm = T)
graph <- ggplot(
avg_temp_by_year,
aes(date, y = 1, fill = avg_temperature)
) +
geom_tile() +
scale_x_date(
date_breaks = "5 years",
date_labels = "%Y",
expand = c(0, 0)
) +
scale_fill_gradientn(colors = rev(col_strip), values = scales::rescale(c(maxmin[1], md, maxmin[2])),
na.value = "gray80") +
labs(
title = "Annual temperature in France vs 1975-2024 average",
caption = "Data: ERA5"
) +
coord_cartesian(expand = FALSE) +
theme_strip()
graph
theme_strip <- function(){
theme_minimal() %+replace%
theme(
axis.text.y = element_blank(),
axis.line.y = element_blank(),
axis.title = element_blank(),
panel.grid.major = element_blank(),
legend.title = element_blank(),
axis.text.x = element_text(vjust = 3),
panel.grid.minor = element_blank(),
plot.title = element_text(size = 14, face = "bold"),
legend.key.width = unit(.5, "lines")
)
}
col_strip <- brewer.pal(11, "RdBu")
# all
brewer.pal.info
# For the final graphic we use the geometry geom_tile( ).
#Since the data does not have a specific value for the Y axis, we need a dummy value, here I used 1. Also, I adjust the width of the color bar in the legend.
maxmin <- range(avg_temp_by_year$avg_temperature, na.rm = T)
md <- mean(avg_temp_by_year$avg_temperature, na.rm = T)
graph <- ggplot(
avg_temp_by_year,
aes(date, y = 1, fill = avg_temperature)
) +
geom_tile() +
scale_x_date(
date_breaks = "5 years",
date_labels = "%Y",
expand = c(0, 0)
) +
scale_fill_gradientn(colors = rev(col_strip), values = scales::rescale(c(maxmin[1], md, maxmin[2])),
na.value = "gray80") +
labs(
title = "Annual temperature in Seckenhausen vs 1975-2024 average",
caption = "Data: ERA5"
) +
coord_cartesian(expand = FALSE) +
theme_strip()
graph
